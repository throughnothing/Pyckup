#!/usr/bin/env python
from configobj import ConfigObj
from optparse import OptionParser
import sys,subprocess,os


class Config:
    CONFIG_FILE=os.path.expanduser('~/.pyckuprc')
    
    def __init__(self,config_file=None):
        self.config_file = config_file if config_file else self.CONFIG_FILE

        self._define_options()
        self._check_options()
        self._read_config()
    
    def _read_config(self):
        config = ConfigObj(self.config_file)
        # Verify that source and targets exist in config
        if self.opts.source and self.opts.source not in config['SOURCES']:
            print "Source '%s' does not exist in your config!" % self.opts.source
            sys.exit(2)
        if self.opts.targets:
            for target in self.opts.targets:
                if target not in config['TARGETS']:
                    print "Target '%s' does not exist in your config!" % target
                    sys.exit(2)

        if config == {}:
            print "Error reading config: %s" % self.config_file
            sys.exit(1)

        self.targets = config['TARGETS']
        self.sources = config['SOURCES']


    def _check_options(self):
        opts = self.opts
        # Make sure necessary information was given
        if opts.verify:
            self.action = 'verify'
            if not opts.source or not opts.targets:
                self.parser.error('You need to specify at least one source and one target to run a verification!')
        elif opts.cleanup:
            self.action = 'cleanup'
            if not opts.targets:
                self.parser.error('You need to specify at least one target to do a cleanup!')
        elif opts.list_current_files:
            self.action = 'list-current-files'
            if not opts.targets:
                self.parser.error('You need to specify at least one target to list files of!')
        elif opts.collection_status:
            self.action = 'collection-status'
            if not opts.targets:
                self.parser.error('You need to specify at least one target to list files of!')
        elif opts.remove_old:
            self.action = 'remove-old'
            if not opts.targets:
                self.parser.error('You need to specify at least one target to remove old backups of!')
        else:
            self.action = 'backup'
            if not opts.source or not opts.targets:
                self.parser.error('You need to specify at least one source and one target to run a backup!')

        # Make sure targets is a list
        if opts.targets:
            opts.targets = opts.targets.split(',')

    def _define_options(self):
        parser = OptionParser()
        parser.add_option("-s", "--source", dest="source", help="Source to backup", metavar="SOURCE")
        parser.add_option("-t", "--targets", dest="targets", help="Targets to backup to (comma separated, no spaces)", metavar="TARGETS")
        parser.add_option("--verify", action="store_true", dest="verify", help="Verify a backup of a source on a particular target")
        parser.add_option("--cleanup", action="store_true", dest="cleanup", help="Cleanup a target")
        parser.add_option("--list-current-files", action="store_true", dest="list_current_files", help="List current files in a backup")
        parser.add_option("--collection-status", action="store_true", dest="collection_status", help="Show the status of a collection")
        parser.add_option("--remove-old", action="store_true", dest="remove_old", help="Remove old backups as specified by the target")
        parser.add_option("--dry-run", action="store_true", dest="dry_run", help="Dry Run")
        parser.add_option("-d", "--debug", action="store_true", dest="debug", help="Debug Messages")
        parser.add_option("-v", "--verbosity", dest="verbosity", help="Level of verbosity for duplicity (0-9)")
        self.parser = parser
        (self.opts, args) = parser.parse_args()

class Backup:
    duplicity = '/usr/bin/duplicity'
    def __init__(self,config,target_name):
        self.source = False
        self.sourc_path = False
        self.target = False
        self.target_path = False
        self.target_name = target_name
        self.env = {}

        self.config = config
        self.includes = ''
        self.excludes = ''

    def _parse_source_args(self):
        if 'include' in self.source:
            self.includes = []
            if(type(self.source['include']).__name__ != 'list'):
                self.source['include'] = [self.source['include']]
            #self.includes = '--include ' + ' --include '.join('"%s%s"' % (self.source_path,e) for e in self.source['include'])
            for include in self.source['include']:
                self.includes.append('--include')
                self.includes.append('%s%s' % (self.source_path, include))
        if 'exclude' in self.source:
            self.excludes = []
            if(type(self.source['exclude']).__name__ != 'list'):
                self.source['exclude'] = [self.source['exclude']]
            #self.excludes = '--exclude ' + ' --exclude '.join('"%s%s"' % (self.source_path,e) for e in self.source['exclude'])
            for exclude in self.source['exclude']:
                self.excludes.append('--exclude')
                self.excludes.append('%s%s' % (self.source_path, exclude))

    def _parse_target_args(self):
        if 'remove_older_than' in self.target:
            pass
        if self.target_path[0:5].lower() == 's3://' or self.target_path[0:10] == 's3+http://':
            self._get_s3_keys()

    def _get_s3_keys(self):
        # Check if target-level keys exist
        if 'aws_access_key_id' in self.target:
            self.env['aws_access_key_id'] = self.target['aws_access_key_id']
            self.env['aws_secret_access_key'] = self.target['aws_secret_access_key']
        # Otherwise check global target level
        elif 'aws_access_key_id' in self.config.targets:
            self.env['aws_access_key_id'] = self.config.targets['aws_access_key_id']
            self.env['aws_secret_access_key'] = self.config.targets['aws_secret_access_key']
        else:
            raise Exception("You don't seem to have your aws keys specified in your config!")

    def _generate_command(self,params):
        # Set necessary environment variables
        for var, val in self.env.items():
            var = var.upper()
            os.putenv(var,val)

        myparams = []
        # Duplicity command has to be first
        myparams.append(self.duplicity)

        # We always want to use the unique target name
        params.append('--name')
        params.append(self.target_name)

        # Encryption
        if 'encrypt' in self.target:
            if self.target['encrypt'].lower() == 'none':
                params.insert(1,'--no-encrypt')
            else:
                params.insert(1,'--encrypt-key')
                params.insert(2, self.target['encrypt'])

        # Dry Run
        if self.config.opts.dry_run:
            params.insert(1,'--dry-run')

        # Verbosity
        if self.config.opts.verbosity:
            params.insert(1,'--verbosity')
            params.insert(2,self.config.opts.verbosity)
    
        # Check includes
        if self.includes:
            for i in self.includes:
                myparams.append(i)

        # Check excludes
        if self.excludes:
            for i in self.excludes:
                myparams.append(i)
                
        # Add on passed in aprams
        myparams = myparams + params



        self.command = myparams
        #self.command = ' '.join(params)
        if self.config.opts.debug:
            print "DEBUG: %s" % self.command

    def set_target(self,target):
        self.target = target
        self.target_path = target['path']
        self._parse_target_args()

    def set_source(self,source):
        self.source = source
        self.source_path = source['path']
        self._parse_source_args()

    def run(self):
        self.command = ''
        if self.config.action == 'backup':
            self._generate_command([self.source['path'], self.target['path']])
        elif self.config.action == 'verify':
            self._generate_command([self.target['path'],self.source['path']])
        elif self.config.action == 'cleanup' or self.config.action == 'list-current-files' or self.config.action == 'collection-status':
            if self.config.action == 'cleanup' and not self.config.opts.dry_run: self.config.action = 'cleanup --force'
            self._generate_command([self.target['path']])

        if self.command:
            subprocess.call(self.command)

class Pyckup:
    def __init__(self,config):
        self.backups = []
        self.config = config

        self._setup_backups()

    def _setup_backups(self):
        for target in self.config.opts.targets:
            self.backups.append(Backup(self.config,target));
            cur = self.backups[-1]
            cur.set_target(self.config.targets[target])
            if self.config.opts.source:
                cur.set_source(self.config.sources[self.config.opts.source])

    def run(self):
        for backup in self.backups:
            backup.run()


if ( __name__ == '__main__' ):
    config = Config()
    pyckup = Pyckup(config)
    pyckup.run()
